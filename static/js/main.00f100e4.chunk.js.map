{"version":3,"sources":["components/Header.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Header","nextProps","nextState","console","log","react_default","a","createElement","className","Component","Card","props","_props$profile","profile","username","name","email","src","concat","alt","CardList","_ref","cards","map","card","components_Card","key","id","SearchBox","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","ErrorBoundry","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","App","onRequestRobots","_this$props","searchField","onSearchChange","robots","isPending","filteredRobots","filter","robot","toLowerCase","includes","components_Header","src_components_SearchBox","components_Scroll","components_ErrorBoundry","components_CardList","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","arguments","length","undefined","action","objectSpread","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.00f100e4.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Header extends Component {\n  shouldComponentUpdate(nextProps, nextState) {\n    return false\n  }\n  render() {\n    console.log(\"Header\")\n    return (\n      <h1 className=\"f1\">RoboFriends</h1>\n    )\n  }\n}\n\nexport default Header;\n","import React from 'react'\n\nconst Card = (props) => {\n  const {username, name, email} = props.profile\n  return (\n    <div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n      <img src={`https://robohash.org/${username}?200x200`} alt='robot'/>\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Card;\n","import React from 'react'\nimport Card from './Card.js'\n\nconst CardList = ({cards}) => {\n  console.log(\"CardList\")\n  return (\n    <div>\n      {cards.map((card) => (\n        <Card key={card.id} profile={card} />\n      ))}\n    </div>\n  );\n}\n\nexport default CardList;\n","import React from 'react';\nimport './SearchBox.css'\n\nconst SearchBox = ({searchChange}) => {\n  console.log(\"SearchBox\")\n  return (\n    <div className=\"pa2\">\n      <input\n        className=\"pa3 ba b--green bg-lightest-blue'\"\n        name=\"searchfield\"\n        type=\"search\"\n        placeholder=\"search robots\"\n        onChange={searchChange}\n      />\n    </div>\n  )\n}\n\nexport default SearchBox;\n","import React from 'react';\n\nconst Scroll = (props) => {\n  return (\n    <div style={{overflowY: 'scroll', border: '1px solid black', height: '500px'}}>\n      {props.children}\n    </div>\n  )\n}\n\nexport default Scroll;\n","import React, { Component } from 'react';\n\nclass ErrorBoundry extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false\n    }\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true})\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>ooooops.  No bueno</h1>\n    }\n\n    return this.props.children\n  }\n\n}\n\nexport default ErrorBoundry;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Header from '../components/Header'\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport './App.css';\n\nimport { setSearchField, requestRobots } from '../actions'\n\n// passes state down as props\nconst mapStateToProps = (state) => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error\n  }\n}\n\n// Passes actions down as props\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n  }\n}\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.onRequestRobots()\n  }\n\n  render() {\n    const { searchField, onSearchChange, robots, isPending } = this.props\n    const filteredRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase())\n    })\n    return isPending ?\n      <h1>Loading</h1> :\n      (\n        <div className=\"tc helvetica\">\n          <Header />\n          <SearchBox\n            searchChange={onSearchChange}\n          />\n          <Scroll>\n            <ErrorBoundry>\n              <CardList cards={filteredRobots} />\n            </ErrorBoundry>\n          </Scroll>\n        </div>\n      );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n} from './constants.js';\n\nexport const setSearchField = (text) => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text\n})\n\nexport const requestRobots = () => (dispatch) => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\n  fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data}))\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error}))\n}\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD'\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING'\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS'\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED'\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n} from './constants.js';\n\nconst initialStateSearch = {\n  searchField: ''\n}\n\nexport const searchRobots = (state=initialStateSearch, action={}) => {\n  switch(action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return { ...state, searchField: action.payload }\n    default:\n      return state;\n  }\n}\n\nconst initialStateRobots = {\n  isPending: false,\n  robots: [],\n  error: ''\n}\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n  switch(action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return {...state, isPending: true }\n    case REQUEST_ROBOTS_SUCCESS:\n      return {...state, robots: action.payload, isPending: false }\n    case REQUEST_ROBOTS_FAILED:\n      return {...state, error: action.payload, isPending: false }\n    default:\n      return state\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\nimport { searchRobots, requestRobots } from './reducers';\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({searchRobots, requestRobots})\nconst store =\n  createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n              <Provider store={store}>\n                <App />\n              </Provider>, document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}